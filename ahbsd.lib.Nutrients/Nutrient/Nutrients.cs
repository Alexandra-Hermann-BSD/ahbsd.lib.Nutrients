//
//  Copyright 2021  Alexandra Hermann – Beratung, Software, Design
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ahbsd.lib.Nutrients.Nutrient;
//
//    var nutrients = Nutrients.FromJson(jsonString);

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ahbsd.lib.Nutrients.Nutrient
{
    /// <summary>
    /// A Class for Nutrients.
    /// </summary>
    public partial class Nutrients
    {
        /// <summary>
        /// Gets or sets the nutrient translation.
        /// </summary>
        /// <value>The nutrient translation.</value>
        [JsonProperty("NutrientTranslation")]
        public NutrientTranslation NutrientTranslation { get; set; }
    }

    /// <summary>
    /// A Class for translating nutrients.
    /// </summary>
    public partial class NutrientTranslation
    {
        [JsonProperty("Biotin")]
        public string Biotin { get; set; }

        [JsonProperty("Caffeine")]
        public string Caffeine { get; set; }

        [JsonProperty("Calcium")]
        public string Calcium { get; set; }

        [JsonProperty("Carbohydrates")]
        public string Carbohydrates { get; set; }

        [JsonProperty("Chloride")]
        public string Chloride { get; set; }

        [JsonProperty("Cholesterol")]
        public string Cholesterol { get; set; }

        [JsonProperty("Chromium")]
        public string Chromium { get; set; }

        [JsonProperty("Copper")]
        public string Copper { get; set; }

        [JsonProperty("FatMonosaturated")]
        public string FatMonosaturated { get; set; }

        [JsonProperty("FatPolysaturated")]
        public string FatPolysaturated { get; set; }

        [JsonProperty("FatSaturated")]
        public string FatSaturated { get; set; }

        [JsonProperty("FatTotal")]
        public string FatTotal { get; set; }

        [JsonProperty("Fiber")]
        public string Fiber { get; set; }

        [JsonProperty("Folate")]
        public string Folate { get; set; }

        [JsonProperty("Iodine")]
        public string Iodine { get; set; }

        [JsonProperty("Iron")]
        public string Iron { get; set; }

        [JsonProperty("Magnesium")]
        public string Magnesium { get; set; }

        [JsonProperty("Manganese")]
        public string Manganese { get; set; }

        [JsonProperty("Molybdenum")]
        public string Molybdenum { get; set; }

        [JsonProperty("Niacin")]
        public string Niacin { get; set; }

        [JsonProperty("PantotenicAcid")]
        public string PantotenicAcid { get; set; }

        [JsonProperty("Phosphorus")]
        public string Phosphorus { get; set; }

        [JsonProperty("Potassium")]
        public string Potassium { get; set; }

        [JsonProperty("Protein")]
        public string Protein { get; set; }

        [JsonProperty("Riboflavin")]
        public string Riboflavin { get; set; }

        [JsonProperty("Selenium")]
        public string Selenium { get; set; }

        [JsonProperty("Sodium")]
        public string Sodium { get; set; }

        [JsonProperty("Sugar")]
        public string Sugar { get; set; }

        [JsonProperty("Thiamin")]
        public string Thiamin { get; set; }

        [JsonProperty("VitaminA")]
        public string VitaminA { get; set; }

        [JsonProperty("VitaminB12")]
        public string VitaminB12 { get; set; }

        [JsonProperty("VitaminB6")]
        public string VitaminB6 { get; set; }

        [JsonProperty("VitaminC")]
        public string VitaminC { get; set; }

        [JsonProperty("VitaminD")]
        public string VitaminD { get; set; }

        [JsonProperty("VitaminE")]
        public string VitaminE { get; set; }

        [JsonProperty("VitaminK")]
        public string VitaminK { get; set; }

        [JsonProperty("Water")]
        public string Water { get; set; }

        [JsonProperty("Zinc")]
        public string Zinc { get; set; }

        [JsonProperty("Alcohol")]
        public string Alcohol { get; set; }

        [JsonProperty("Energy")]
        public string Energy { get; set; }
    }

    /// <summary>
    /// A Class for Nutrients.
    /// </summary>
    public partial class Nutrients
    {
        /// <summary>
        /// Static function to get the translation from a json string.
        /// </summary>
        /// <param name="json">The json string.</param>
        /// <returns>A nutrients object with the translated nutrients.</returns>
        public static Nutrients FromJson(string json) => JsonConvert.DeserializeObject<Nutrients>(json, ahbsd.lib.Nutrients.Nutrient.Converter.Settings);
    }

    /// <summary>
    /// Serialization-Class.
    /// </summary>
    public static class Serialize
    {
        /// <summary>
        /// Static function to set the translation json string from a nutrients object.
        /// </summary>
        /// <param name="self">The <see cref="Nutrients"/> object.</param>
        /// <returns>The json string.</returns>
        public static string ToJson(this Nutrients self) => JsonConvert.SerializeObject(self, ahbsd.lib.Nutrients.Nutrient.Converter.Settings);
    }

    /// <summary>
    /// A converter class.
    /// </summary>
    internal static class Converter
    {
        /// <summary>
        /// Static Settings.
        /// </summary>
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}

