//
//  Copyright 2021  Alexandra Hermann – Beratung, Software, Design
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ahbsd.lib.Nutrients.Nutrient;
//
//    var foodNutrientsSchema = FoodNutrientsSchema.FromJson(jsonString);
using System;
using Newtonsoft.Json;

namespace ahbsd.lib.Nutrients.Nutrient.Schema
{
    /// <summary>
    /// Interface for a converter of <see cref="Measurement"/>.
    /// </summary>
    internal interface IMeasurementConverter
    {
        /// <summary>
        /// Finds out, if a given Type can be converted.
        /// </summary>
        /// <param name="t">The given Type.</param>
        /// <returns>
        /// <c>true</c>, if the <paramref name="t"/> can be converted,
        /// otherwise <c>false</c>.
        /// </returns>
        bool CanConvert(Type t);
        /// <summary>
        /// Reads a JSON string and returns a <see cref="Measurement"/>.
        /// </summary>
        /// <param name="reader">The reader to read.</param>
        /// <param name="t">The type.</param>
        /// <param name="existingValue">An existing value.</param>
        /// <param name="serializer">A serializer.</param>
        /// <returns>The Measurement object.</returns>
        /// <exception cref="Exception">If the <see cref="Measurement"/> can't be unmarshald.</exception>
        /// <remarks><paramref name="t"/> and <paramref name="existingValue"/> are never used.</remarks>
        object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer);
        /// <summary>
        /// Writes a JSON string of an untyped value to the <see cref="JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The JsonWriter.</param>
        /// <param name="untypedValue">The untyped value.</param>
        /// <param name="serializer">The serializer.</param>
        /// <exception cref="Exception">If the untyped value can not be marshald to type <see cref="Measurement"/>.</exception>
        void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer);
    }
}