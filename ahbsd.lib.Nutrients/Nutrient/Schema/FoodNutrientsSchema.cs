//
//  Copyright 2021  Alexandra Hermann – Beratung, Software, Design
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using ahbsd.lib.Nutrients.Nutrient;
//
//    var foodNutrientsSchema = FoodNutrientsSchema.FromJson(jsonString);
using System;
using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace ahbsd.lib.Nutrients.Nutrient.Schema
{

    /// <summary>
    /// The root schema comprises the entire JSON document.
    /// </summary>
    public partial class FoodNutrientsSchema : IFoodNutrientsSchema
    {
        /// <summary>
        /// The default amount in gram or mililiter the food nutrients are measured for. Usually 100
        /// gram or 100 mililiter.
        /// </summary>
        [JsonProperty("DefaultAmount")]
        public double DefaultAmount { get; set; }

        /// <summary>
        /// The measurement of the default amount.
        /// </summary>
        [JsonProperty("DefaultMeasurement")]
        public Measurement DefaultMeasurement { get; set; }

        /// <summary>
        /// The first date, when this version was marked.
        /// </summary>
        [JsonProperty("FirstDate")]
        public string FirstDate { get; set; }

        /// <summary>
        /// The name of the food, for which the nutrients are saved.
        /// </summary>
        [JsonProperty("Name")]
        public string Name { get; set; }

        /// <summary>
        /// The nutrients in the food. If not available: null
        /// </summary>
        [JsonProperty("NutrientValues")]
        public NutrientsInTheFood NutrientValues { get; set; }

        /// <summary>
        /// Nutrients of a food change from time to time. So versioning is quite useful.
        /// </summary>
        [JsonProperty("Version")]
        public double Version { get; set; }
    }

    /// <summary>
    /// The nutrients in the food. If not available: null
    /// </summary>
    public partial class NutrientsInTheFood : INutrientsInTheFood
    {
        /// <summary>
        /// An explanation about the purpose of this instance.
        /// </summary>
        [JsonProperty("Alcohol")]
        public double? Alcohol { get; set; }

        [JsonProperty("Biotin")]
        public double? Biotin { get; set; }

        [JsonProperty("Caffeine")]
        public double? Caffeine { get; set; }

        [JsonProperty("Calcium")]
        public double? Calcium { get; set; }

        [JsonProperty("Carbohydrates")]
        public double? Carbohydrates { get; set; }

        [JsonProperty("Chloride")]
        public double? Chloride { get; set; }

        [JsonProperty("Cholesterol")]
        public double? Cholesterol { get; set; }

        [JsonProperty("Chromium")]
        public double? Chromium { get; set; }

        [JsonProperty("Copper")]
        public double? Copper { get; set; }

        [JsonProperty("Energy")]
        public double Energy { get; set; }

        [JsonProperty("FatMonosaturated")]
        public double? FatMonosaturated { get; set; }

        [JsonProperty("FatPolysaturated")]
        public double? FatPolysaturated { get; set; }

        [JsonProperty("FatSaturated")]
        public double? FatSaturated { get; set; }

        [JsonProperty("Fiber")]
        public double? Fiber { get; set; }

        [JsonProperty("Folate")]
        public double? Folate { get; set; }

        [JsonProperty("Iodine")]
        public double? Iodine { get; set; }

        [JsonProperty("Iron")]
        public double? Iron { get; set; }

        [JsonProperty("Magnesium")]
        public double? Magnesium { get; set; }

        [JsonProperty("Manganese")]
        public double? Manganese { get; set; }

        [JsonProperty("Molybdenum")]
        public double? Molybdenum { get; set; }

        [JsonProperty("Niacin")]
        public double? Niacin { get; set; }

        [JsonProperty("PantotenicAcid")]
        public double? PantotenicAcid { get; set; }

        [JsonProperty("Phosphorus")]
        public double? Phosphorus { get; set; }

        [JsonProperty("Potassium")]
        public double? Potassium { get; set; }

        [JsonProperty("Protein")]
        public double? Protein { get; set; }

        [JsonProperty("Riboflavin")]
        public double? Riboflavin { get; set; }

        [JsonProperty("Selenium")]
        public double? Selenium { get; set; }

        [JsonProperty("Sodium")]
        public double? Sodium { get; set; }

        [JsonProperty("Sugar")]
        public double? Sugar { get; set; }

        [JsonProperty("Thiamin")]
        public double? Thiamin { get; set; }

        [JsonProperty("VitaminA")]
        public double? VitaminA { get; set; }

        [JsonProperty("VitaminB12")]
        public double? VitaminB12 { get; set; }

        [JsonProperty("VitaminB6")]
        public double? VitaminB6 { get; set; }

        [JsonProperty("VitaminC")]
        public double? VitaminC { get; set; }

        [JsonProperty("VitaminD")]
        public double? VitaminD { get; set; }

        [JsonProperty("VitaminE")]
        public double? VitaminE { get; set; }

        [JsonProperty("VitaminK")]
        public double? VitaminK { get; set; }

        [JsonProperty("Water")]
        public double? Water { get; set; }

        [JsonProperty("Zinc")]
        public double? Zinc { get; set; }
    }

    /// <summary>
    /// The measurement of amounts.
    /// </summary>
    public enum Measurement
    {
        /// <summary>
        /// nano gram
        /// </summary>
        ng = 1,
        /// <summary>
        /// mycro gram
        /// </summary>
        µg = 1000 * ng,
        /// <summary>
        /// milli gram
        /// </summary>
        mg = 1000 * µg,
        /// <summary>
        /// gram
        /// </summary>
        g = 1000 * mg,
        /// <summary>
        /// milli litre
        /// </summary>
        ml = g -1,
    };

    /// <summary>
    /// The class for a FoodNutrients Schema.
    /// </summary>
    public partial class FoodNutrientsSchema
    {
        /// <summary>
        /// A function to read a JSON string and return it as <see cref="FoodNutrientsSchema"/>.
        /// </summary>
        /// <param name="json">The JSON string to read.</param>
        /// <returns>The <see cref="FoodNutrientsSchema"/>.</returns>
        public static FoodNutrientsSchema FromJson(string json)
            => JsonConvert.DeserializeObject<FoodNutrientsSchema>(json,
                ahbsd.lib.Nutrients.Nutrient.Schema.Converter.Settings);
    }

    /// <summary>
    /// A class to serialize.
    /// </summary>
    public static class Serialize
    {
        /// <summary>
        /// A method to serialize a <see cref="FoodNutrientsSchema"/> to a JSON string.
        /// </summary>
        /// <param name="self">The <see cref="FoodNutrientsSchema"/> to serialize.</param>
        /// <returns>The serialized <see cref="FoodNutrientsSchema"/>.</returns>
        public static string ToJson(this FoodNutrientsSchema self)
            => JsonConvert.SerializeObject(
                self,
                ahbsd.lib.Nutrients.Nutrient.Schema.Converter.Settings);
    }

    /// <summary>
    /// An internal class to convert.
    /// </summary>
    internal static class Converter
    {
        /// <summary>
        /// The settings.
        /// </summary>
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                MeasurementConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    /// <summary>
    /// An internal class to convert a <see cref="Measurement"/>.
    /// </summary>
    internal class MeasurementConverter : JsonConverter, IMeasurementConverter
    {
        /// <summary>
        /// Finds out, if a given Type can be converted.
        /// </summary>
        /// <param name="t">The given Type.</param>
        /// <returns>
        /// <c>true</c>, if the <paramref name="t"/> can be converted,
        /// otherwise <c>false</c>.
        /// </returns>
        public override bool CanConvert(Type t) => t == typeof(Measurement) || t == typeof(Measurement?);

        /// <summary>
        /// Reads a JSON string and returns a <see cref="Measurement"/>.
        /// </summary>
        /// <param name="reader">The reader to read.</param>
        /// <param name="t">The type.</param>
        /// <param name="existingValue">An existing value.</param>
        /// <param name="serializer">A serializer.</param>
        /// <returns>The Measurement object.</returns>
        /// <exception cref="Exception">If the <see cref="Measurement"/> can't be unmarshald.</exception>
        /// <remarks><paramref name="t"/> and <paramref name="existingValue"/> are never used.</remarks>
        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            object result;
            string value;

            if (reader.TokenType == JsonToken.Null) result = null;

            value = serializer.Deserialize<string>(reader);

            switch (value)
            {
                case "g":
                    result = Measurement.g;
                    break;
                case "ml":
                    result = Measurement.ml;
                    break;
                default:
                    throw new Exception("Cannot unmarshal type Measurement");
            }

            return result;
        }

        /// <summary>
        /// Writes a JSON string of an untyped value to the <see cref="JsonWriter"/>.
        /// </summary>
        /// <param name="writer">The JsonWriter.</param>
        /// <param name="untypedValue">The untyped value.</param>
        /// <param name="serializer">The serializer.</param>
        /// <exception cref="Exception">If the untyped value can not be marshald to type <see cref="Measurement"/>.</exception>
        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            Measurement value;
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            try
            {
                value = (Measurement)untypedValue;
                switch (value)
                {
                    case Measurement.g:
                        serializer.Serialize(writer, "g");
                        break;
                    case Measurement.ml:
                        serializer.Serialize(writer, "ml");
                        break;
                    default:
                        throw new Exception("Cannot marshal type Measurement");
                }
            }
            catch (Exception ex)
            {
                throw new Exception($"Cannot marshal type Measurement / {ex.Message}", ex);
            }
        }

        /// <summary>
        /// Static constructor.
        /// </summary>
        static MeasurementConverter()
        {
            Singleton = new MeasurementConverter();
        }

        /// <summary>
        /// A <see cref="MeasurementConverter"/>.
        /// </summary>
        public static readonly MeasurementConverter Singleton;
    }
}
